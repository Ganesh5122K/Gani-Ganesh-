import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset (replace with your own dataset path)
# df = pd.read_csv("your_dataset.csv") # Original line causing the error

# Create a sample DataFrame for demonstration
data = {
    'col1': np.random.rand(20),
    'col2': np.random.randint(1, 100, 20),
    'col3': ['A', 'B', 'A', 'C', 'B', 'A', 'C', 'A', 'B', 'C', 'A', 'B', 'A', 'C', 'B', 'A', 'C', 'A', 'B', 'C'],
    'col4': [10, 20, np.nan, 40, 50, 60, np.nan, 80, 90, 100, 110, np.nan, 130, 140, 150, 160, np.nan, 180, 190, 200]
}
df = pd.DataFrame(data)


# ---------------- 1. Preview Original Dataset ----------------
print("ðŸ”¹ Original Data Preview:")
display(df.head())
print("\nðŸ”¹ Dataset Info:")
display(df.info())

# ---------------- 2. Missing Value Treatment ----------------
print("\nðŸ”¸ Missing Values Before Cleaning:")
display(df.isnull().sum())

# Fill missing numerical values with median
for col in df.select_dtypes(include=np.number).columns:
    median_val = df[col].median()
    df[col] = df[col].fillna(median_val)

# Fill missing categorical values with mode
for col in df.select_dtypes(include='object').columns:
    mode_val = df[col].mode()[0]
    df[col] = df[col].fillna(mode_val)

print("\nâœ… Missing Values After Cleaning:")
display(df.isnull().sum())

# ---------------- 3. Outlier Treatment ----------------
# Boxplots for numeric columns
for col in df.select_dtypes(include=np.number).columns:
    sns.boxplot(x=df[col])
    plt.title(f'Boxplot of {col}')
    plt.show()

# IQR method to remove outliers
def remove_outliers(data, col):
    Q1 = data[col].quantile(0.25)
    Q3 = data[col].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR
    return data[(data[col] >= lower) & (data[col] <= upper)]

# Apply IQR method to all numeric columns
for col in df.select_dtypes(include=np.number).columns:
    df = remove_outliers(df, col)

print("\nâœ… Data Shape After Outlier Removal:", df.shape)

# ---------------- 4. Data Consistency ----------------
# Remove duplicate rows
df.drop_duplicates(inplace=True)

# Convert categorical text to lowercase and strip whitespaces
for col in df.select_dtypes(include='object').columns:
    df[col] = df[col].str.strip().str.lower()

print("\nâœ… Data After Consistency Fix:")
display(df.head())

# ---------------- 5. Type Conversion ----------------
# Convert 'object' columns to 'category' dtype
for col in df.select_dtypes(include='object').columns:
    df[col] = df[col].astype('category')

print("\nðŸ”¸ Final Dataset Info:")
display(df.info())

# ---------------- 6. Export Cleaned Dataset ----------------
df.to_csv("cleaned_dataset.csv", index=False)
print("\nâœ… Cleaned dataset saved as 'cleaned_dataset.csv'")
